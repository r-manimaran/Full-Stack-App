@page "/"
@using TodoApplication.Components
@using TodoApplication.Models
@using Blazored.LocalStorage
@inject ILocalStorageService localStorage

<PageTitle>Todo Application</PageTitle>

<div class="app-container @appTheme">
    <div class="hero">
        <div class="container">
            <TodoHeader AppTitle="ToDo"
                        LightIcon="las la-sun"
                        DarkIcon="las la-moon"
                        ToggleState="ToggleTheme"/>

            <div class="body-container">
                <input type="text" placeholder="Create a new todo..."
                            @bind="todoTitle"
                            @bind:event="oninput"
                            @onkeydown="AddTodo" />

                <div class="todo-container">
                    @if (!todos.Any())
                    {
                        <p class="no-tasks-text">
                            Start adding some tasks! ✅
                        </p>
                    }
                    else
                    {
                        @foreach (var todo in todos)
                        {
                            <TodoComponent Todo="todo" 
                            RemoveAnimation="@String.Empty" 
                            OnRemoveTodo="RemoveTodo"
                            OnCheckTodo="UpdateTodoList"/>
                        }
                    }
                </div>
                <TodoFilter 
                    ItemsLeft="todos.Count()"
                    FilterOptions="filterOptions"
                    FilterBy="FilterTodoList"
                    ClearCompleted="ClearCompletedTasks"/>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Todo> todos = new List<Todo>();
    private string todoTitle = string.Empty;
    private string appTheme = string.Empty;
    private Dictionary<string, string> filterOptions = new();

    protected async override Task OnInitializedAsync()
    {
        appTheme = await localStorage.GetItemAsync<string>("appTheme") ?? "";

        // Getting Todos from local storage when initializing the application
        todos = await localStorage.GetItemAsync<List<Todo>>("todos") ?? Enumerable.Empty<Todo>().ToList();

        // Add the filters
        filterOptions.Add("all", "All");
        filterOptions.Add("active", "Active");
        filterOptions.Add("completed", "Completed");
    }
    private async Task AddTodo(KeyboardEventArgs e)
    {
        if(e.Key == "Enter" && !string.IsNullOrWhiteSpace(todoTitle))
        {
            var newTodo = new Todo() { Title = todoTitle };
            todos.Add(newTodo);
            // update the todos in the local storage after adding a todo
            await localStorage.SetItemAsync("todos", todos);
            todoTitle = string.Empty;
        }
    }

    private async Task UpdateTodoList()
    {
        await localStorage.SetItemAsync("todos", todos);
    }

    private async Task RemoveTodo(Todo todo)
    {
        todos.Remove(todo);
        // update the todos in the local storage after the update
        await localStorage.SetItemAsync("todos", todos);
    }

    private async Task ToggleTheme(bool isDarkTheme)
    {
        appTheme = isDarkTheme ? "dark-theme" : "";
        await localStorage.SetItemAsync<string>("appTheme", appTheme);
    }

    private async Task FilterTodoList(string filterOption)
    {
        todos = await localStorage.GetItemAsync<List<Todo>>("todos") ?? Enumerable.Empty<Todo>().ToList();

        todos = filterOption switch
        {
            "active" => todos.Where(x => !x.IsDone).ToList(),
            "completed" => todos.Where(x => x.IsDone).ToList(),
            _ => await localStorage.GetItemAsync<List<Todo>>("todos") ?? Enumerable.Empty<Todo>().ToList()
        };
    }
    /// <summary>
    ///  Clear all the tasks that are marked as done
    /// </summary>
    /// <returns></returns>
    private async Task ClearCompletedTasks()
    {
        todos = await localStorage.GetItemAsync<List<Todo>>("todos") ?? Enumerable.Empty<Todo>().ToList();
        todos = todos.Where(x => !x.IsDone).ToList();
        await localStorage.SetItemAsync("todos", todos);
    }
}



